// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 00001_pre_go_acc_user_verify_9999.sql

package database

import (
	"context"
	"database/sql"
)

const createVerify = `-- name: CreateVerify :execresult
INSERT INTO ` + "`" + `pre_go_acc_user_verify_9999` + "`" + ` (
    verify_otp,
    verify_key,
    verify_key_hash,
    verify_type,
    is_verified,
    is_deleted,
    verify_created_at,
    verify_updated_at
) VALUES (?, ?, ?, ?, 0, 0, now(), now())
`

type CreateVerifyParams struct {
	VerifyOtp     string
	VerifyKey     string
	VerifyKeyHash string
	VerifyType    sql.NullInt32
}

func (q *Queries) CreateVerify(ctx context.Context, arg CreateVerifyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createVerify,
		arg.VerifyOtp,
		arg.VerifyKey,
		arg.VerifyKeyHash,
		arg.VerifyType,
	)
}

const getVerifyByKeyHash = `-- name: GetVerifyByKeyHash :one
SELECT verify_otp, verify_key_hash, verify_key, verify_id
FROM ` + "`" + `pre_go_acc_user_verify_9999` + "`" + `
WHERE verify_key_hash = ? AND is_verified = 0
`

type GetVerifyByKeyHashRow struct {
	VerifyOtp     string
	VerifyKeyHash string
	VerifyKey     string
	VerifyID      int32
}

func (q *Queries) GetVerifyByKeyHash(ctx context.Context, verifyKeyHash string) (GetVerifyByKeyHashRow, error) {
	row := q.db.QueryRowContext(ctx, getVerifyByKeyHash, verifyKeyHash)
	var i GetVerifyByKeyHashRow
	err := row.Scan(
		&i.VerifyOtp,
		&i.VerifyKeyHash,
		&i.VerifyKey,
		&i.VerifyID,
	)
	return i, err
}

const getVerifyOTP = `-- name: GetVerifyOTP :one
SELECT verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created_at, verify_updated_at
FROM ` + "`" + `pre_go_acc_user_verify_9999` + "`" + `
WHERE verify_key_hash = ?
`

func (q *Queries) GetVerifyOTP(ctx context.Context, verifyKeyHash string) (PreGoAccUserVerify9999, error) {
	row := q.db.QueryRowContext(ctx, getVerifyOTP, verifyKeyHash)
	var i PreGoAccUserVerify9999
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreatedAt,
		&i.VerifyUpdatedAt,
	)
	return i, err
}

const updateVerifyToVerified = `-- name: UpdateVerifyToVerified :exec
UPDATE ` + "`" + `pre_go_acc_user_verify_9999` + "`" + `
SET is_verified = 1,
    verify_updated_at = now()
WHERE verify_key_hash = ?
`

func (q *Queries) UpdateVerifyToVerified(ctx context.Context, verifyKeyHash string) error {
	_, err := q.db.ExecContext(ctx, updateVerifyToVerified, verifyKeyHash)
	return err
}
